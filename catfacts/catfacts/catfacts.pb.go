// Code generated by protoc-gen-go. DO NOT EDIT.
// source: catfacts.proto

package catfacts

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CatFactRequest struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CatFactRequest) Reset()         { *m = CatFactRequest{} }
func (m *CatFactRequest) String() string { return proto.CompactTextString(m) }
func (*CatFactRequest) ProtoMessage()    {}
func (*CatFactRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c76632a8a9d5151, []int{0}
}

func (m *CatFactRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CatFactRequest.Unmarshal(m, b)
}
func (m *CatFactRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CatFactRequest.Marshal(b, m, deterministic)
}
func (m *CatFactRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CatFactRequest.Merge(m, src)
}
func (m *CatFactRequest) XXX_Size() int {
	return xxx_messageInfo_CatFactRequest.Size(m)
}
func (m *CatFactRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CatFactRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CatFactRequest proto.InternalMessageInfo

func (m *CatFactRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type CatFactResponse struct {
	Fact                 string   `protobuf:"bytes,1,opt,name=fact,proto3" json:"fact,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CatFactResponse) Reset()         { *m = CatFactResponse{} }
func (m *CatFactResponse) String() string { return proto.CompactTextString(m) }
func (*CatFactResponse) ProtoMessage()    {}
func (*CatFactResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c76632a8a9d5151, []int{1}
}

func (m *CatFactResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CatFactResponse.Unmarshal(m, b)
}
func (m *CatFactResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CatFactResponse.Marshal(b, m, deterministic)
}
func (m *CatFactResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CatFactResponse.Merge(m, src)
}
func (m *CatFactResponse) XXX_Size() int {
	return xxx_messageInfo_CatFactResponse.Size(m)
}
func (m *CatFactResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CatFactResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CatFactResponse proto.InternalMessageInfo

func (m *CatFactResponse) GetFact() string {
	if m != nil {
		return m.Fact
	}
	return ""
}

func init() {
	proto.RegisterType((*CatFactRequest)(nil), "catfacts.CatFactRequest")
	proto.RegisterType((*CatFactResponse)(nil), "catfacts.CatFactResponse")
}

func init() { proto.RegisterFile("catfacts.proto", fileDescriptor_0c76632a8a9d5151) }

var fileDescriptor_0c76632a8a9d5151 = []byte{
	// 171 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4b, 0x4e, 0x2c, 0x49,
	0x4b, 0x4c, 0x2e, 0x29, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x80, 0xf1, 0x95, 0x14,
	0xb8, 0xf8, 0x9c, 0x13, 0x4b, 0xdc, 0x12, 0x93, 0x4b, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b,
	0x84, 0xf8, 0xb8, 0x98, 0x32, 0x53, 0x24, 0x18, 0x15, 0x18, 0x35, 0x98, 0x83, 0x98, 0x32, 0x53,
	0x94, 0x54, 0xb9, 0xf8, 0xe1, 0x2a, 0x8a, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x85, 0x84, 0xb8, 0x58,
	0x40, 0xba, 0xc1, 0x8a, 0x38, 0x83, 0xc0, 0x6c, 0xa3, 0xa7, 0x8c, 0x5c, 0x1c, 0x50, 0x75, 0xc5,
	0x42, 0xce, 0x5c, 0x5c, 0xee, 0xa9, 0x25, 0x50, 0xae, 0x90, 0x84, 0x1e, 0xdc, 0x7a, 0x54, 0xbb,
	0xa4, 0x24, 0xb1, 0xc8, 0x40, 0xec, 0x50, 0x62, 0x10, 0x72, 0xe7, 0xe2, 0xf1, 0xc9, 0x2c, 0x2e,
	0x81, 0x1b, 0x4a, 0x9e, 0x31, 0x06, 0x8c, 0x42, 0xde, 0x5c, 0x7c, 0xc1, 0x25, 0x45, 0xa9, 0x89,
	0xb9, 0x14, 0x1a, 0xa5, 0xc1, 0x68, 0xc0, 0x98, 0xc4, 0x06, 0x0e, 0x41, 0x63, 0x40, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x20, 0x0c, 0x00, 0xdb, 0x53, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CatFactsClient is the client API for CatFacts service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CatFactsClient interface {
	GetCatFact(ctx context.Context, in *CatFactRequest, opts ...grpc.CallOption) (*CatFactResponse, error)
	ListCatFacts(ctx context.Context, in *CatFactRequest, opts ...grpc.CallOption) (CatFacts_ListCatFactsClient, error)
	StreamCatFacts(ctx context.Context, opts ...grpc.CallOption) (CatFacts_StreamCatFactsClient, error)
}

type catFactsClient struct {
	cc *grpc.ClientConn
}

func NewCatFactsClient(cc *grpc.ClientConn) CatFactsClient {
	return &catFactsClient{cc}
}

func (c *catFactsClient) GetCatFact(ctx context.Context, in *CatFactRequest, opts ...grpc.CallOption) (*CatFactResponse, error) {
	out := new(CatFactResponse)
	err := c.cc.Invoke(ctx, "/catfacts.CatFacts/GetCatFact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catFactsClient) ListCatFacts(ctx context.Context, in *CatFactRequest, opts ...grpc.CallOption) (CatFacts_ListCatFactsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CatFacts_serviceDesc.Streams[0], "/catfacts.CatFacts/ListCatFacts", opts...)
	if err != nil {
		return nil, err
	}
	x := &catFactsListCatFactsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CatFacts_ListCatFactsClient interface {
	Recv() (*CatFactResponse, error)
	grpc.ClientStream
}

type catFactsListCatFactsClient struct {
	grpc.ClientStream
}

func (x *catFactsListCatFactsClient) Recv() (*CatFactResponse, error) {
	m := new(CatFactResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *catFactsClient) StreamCatFacts(ctx context.Context, opts ...grpc.CallOption) (CatFacts_StreamCatFactsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CatFacts_serviceDesc.Streams[1], "/catfacts.CatFacts/StreamCatFacts", opts...)
	if err != nil {
		return nil, err
	}
	x := &catFactsStreamCatFactsClient{stream}
	return x, nil
}

type CatFacts_StreamCatFactsClient interface {
	Send(*CatFactRequest) error
	Recv() (*CatFactResponse, error)
	grpc.ClientStream
}

type catFactsStreamCatFactsClient struct {
	grpc.ClientStream
}

func (x *catFactsStreamCatFactsClient) Send(m *CatFactRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *catFactsStreamCatFactsClient) Recv() (*CatFactResponse, error) {
	m := new(CatFactResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CatFactsServer is the server API for CatFacts service.
type CatFactsServer interface {
	GetCatFact(context.Context, *CatFactRequest) (*CatFactResponse, error)
	ListCatFacts(*CatFactRequest, CatFacts_ListCatFactsServer) error
	StreamCatFacts(CatFacts_StreamCatFactsServer) error
}

// UnimplementedCatFactsServer can be embedded to have forward compatible implementations.
type UnimplementedCatFactsServer struct {
}

func (*UnimplementedCatFactsServer) GetCatFact(ctx context.Context, req *CatFactRequest) (*CatFactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCatFact not implemented")
}
func (*UnimplementedCatFactsServer) ListCatFacts(req *CatFactRequest, srv CatFacts_ListCatFactsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListCatFacts not implemented")
}
func (*UnimplementedCatFactsServer) StreamCatFacts(srv CatFacts_StreamCatFactsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamCatFacts not implemented")
}

func RegisterCatFactsServer(s *grpc.Server, srv CatFactsServer) {
	s.RegisterService(&_CatFacts_serviceDesc, srv)
}

func _CatFacts_GetCatFact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CatFactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatFactsServer).GetCatFact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catfacts.CatFacts/GetCatFact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatFactsServer).GetCatFact(ctx, req.(*CatFactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatFacts_ListCatFacts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CatFactRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CatFactsServer).ListCatFacts(m, &catFactsListCatFactsServer{stream})
}

type CatFacts_ListCatFactsServer interface {
	Send(*CatFactResponse) error
	grpc.ServerStream
}

type catFactsListCatFactsServer struct {
	grpc.ServerStream
}

func (x *catFactsListCatFactsServer) Send(m *CatFactResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CatFacts_StreamCatFacts_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CatFactsServer).StreamCatFacts(&catFactsStreamCatFactsServer{stream})
}

type CatFacts_StreamCatFactsServer interface {
	Send(*CatFactResponse) error
	Recv() (*CatFactRequest, error)
	grpc.ServerStream
}

type catFactsStreamCatFactsServer struct {
	grpc.ServerStream
}

func (x *catFactsStreamCatFactsServer) Send(m *CatFactResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *catFactsStreamCatFactsServer) Recv() (*CatFactRequest, error) {
	m := new(CatFactRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _CatFacts_serviceDesc = grpc.ServiceDesc{
	ServiceName: "catfacts.CatFacts",
	HandlerType: (*CatFactsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCatFact",
			Handler:    _CatFacts_GetCatFact_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListCatFacts",
			Handler:       _CatFacts_ListCatFacts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamCatFacts",
			Handler:       _CatFacts_StreamCatFacts_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "catfacts.proto",
}
